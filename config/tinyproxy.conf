##
## tinyproxy.conf -- tinyproxy daemon configuration file
##

#
# User/Group: The user and group that the proxy should run as.
#
User nobody
Group nogroup

#
# Port: Specify the port which tinyproxy will listen on.  Please note
# that should you choose to run on a port lower than 1024 you will need
# to start tinyproxy using root.
#
Port 8888

#
# Listen: If you have multiple interfaces this allows you to bind to
# only one. If this is commented out, tinyproxy will bind to all
# interfaces present.
#
#Listen 192.168.0.1

#
# Bind: This allows you to specify which interface will be used for
# outgoing connections.  This is useful for multi-home'd machines where
# you want all traffic to appear outgoing from one particular interface.
#
#Bind 192.168.0.1

#
# BindSame: If enabled, tinyproxy will bind the outgoing connection to the
# same IP address which received the incoming connection.
#
#BindSame yes

#
# Timeout: The maximum number of seconds of inactivity a connection is
# allowed to have before it is closed by tinyproxy.
#
Timeout 600

#
# ErrorFile: Defines the HTML file to send when a given HTTP error
# occurs.  You will need to create these files yourself and place them in
# the location defined with the ErrorFile directive.  The HTTP error codes
# for which an ErrorFile can be defined are 400, 401, 403, 404, 408, 409,
# 500, 501, 502, 503, and 504.
#
#ErrorFile 404 "/usr/share/tinyproxy/404.html"
#ErrorFile 400 "/usr/share/tinyproxy/400.html"
#ErrorFile 503 "/usr/share/tinyproxy/503.html"
#ErrorFile 403 "/usr/share/tinyproxy/403.html"
#ErrorFile 408 "/usr/share/tinyproxy/408.html"

#
# DefaultErrorFile: The HTML file that gets sent if there is no
# HTML file defined with an ErrorFile directive for that specific
# error code.
#
DefaultErrorFile "/usr/share/tinyproxy/default.html"

#
# StatHost: This configures the host name or IP address that is treated
# as the stat host: Whenever a request for this host is received,
# Tinyproxy will return an internal statistics page instead of
# forwarding the request to that host.  The default value of StatHost is
# tinyproxy.stats.
#
#StatHost "tinyproxy.stats"
#

#
# StatFile: The HTML file that gets sent when a request is made
# for the stathost.  If this file doesn't exist a basic page is
# hardcoded in tinyproxy.
#
StatFile "/usr/share/tinyproxy/stats.html"

#
# LogFile: Allows you to specify the location where information should
# be logged to.  If you would prefer to log to syslog, then disable this
# and enable the Syslog directive.
#
LogFile "/var/log/tinyproxy/tinyproxy.log"

#
# Syslog: Tell tinyproxy to use syslog instead of a logfile.  This
# option must not be enabled if the Logfile directive is being used.
# Set the facility to be used with the Facility option.
#
#Syslog On

#
# LogLevel: Set the logging level. Allowed settings are:
#	Critical	(least verbose)
#	Error
#	Warning
#	Notice
#	Connect		(to log connections without Info's noise)
#	Info		(most verbose)
# The LogLevel logs from the set level and above. For example, if the
# LogLevel was set to Warning, then all log messages from Warning to
# Critical would be output, but Notice and below would be suppressed.
#
LogLevel Info

#
# PidFile: Write the PID of the main tinyproxy thread to this file so it
# can be used for signalling purposes.
#
PidFile "/tmp/tinyproxy.pid"

#
# XTinyproxy: Tell Tinyproxy to include the X-Tinyproxy header, which
# contains the client's IP address.
#
XTinyproxy Yes

#
# BasicAuth: HTTP "Basic Authentication" for accessing the proxy.
# If there are any entries specified, access is only granted for authenticated
# users.
BasicAuth proxyuser changeThisPassword!

#
# BasicAuthRealm: In case BasicAuth is configured, the "realm" information.
BasicAuthRealm "Tinyproxy"

#
# Upstream: Specify the proxy server to upstream all requests through.
# Using a SOCKS proxy:
#   upstream socks5 proxyip:proxyport
# The upstream proxy must support the CONNECT method.
#
#Upstream httpproxy.mydomain.com:8080

#
# No upstream proxy for internal websites and unqualified hosts
#
#no_upstream ".internal.example.com"
#no_upstream "www.example.com"
#no_upstream "10.1.0.0/16"
#no_upstream "192.168.0.0/24"
#no_upstream "."
#no_upstream "localhost"

#
# MaxClients: This is the absolute highest number of threads which will
# be created. In other words, only MaxClients number of clients can be
# connected at the same time.
#
MaxClients 100

#
# MinSpareServers/MaxSpareServers: These settings set the number of
# idle servers to start with and keep around. Setting MaxSpareServers to 0
# disables the limit.
#
MinSpareServers 5
MaxSpareServers 20

#
# StartServers: The number of servers to start initially.
#
StartServers 10

#
# MaxRequestsPerChild: The number of connections a thread will handle
# before it is killed. In contrast to the original model this allows for
# dynamic sizing of the thread pool. Setting this to 0 disables the feature.
#
MaxRequestsPerChild 0

#
# Allow: Customization of authorization controls. If there are any
# access control keywords then the default action is to deny. Otherwise,
# the default action is to allow (no access control).
#
# The order of the controls are important. All incoming connections are
# tested against the controls based on order.
#
Allow 127.0.0.1
Allow 192.168.0.0/16
Allow 10.0.0.0/8
Allow 172.16.0.0/12

#
# AddHeader: Adds the specified headers to outgoing HTTP requests that
# Tinyproxy makes. Note that this option will not work for HTTPS
# traffic, as Tinyproxy has no control over what headers are exchanged.
#
#AddHeader "X-My-Header" "Powered by Tinyproxy"

#
# ViaProxyName: The "Via" header is required by the HTTP RFC, but using
# the real host name is a security concern.  By default, the string
# "tinyproxy" is used and this shows up in the HTTP headers.  Use the
# ViaProxyName to disable and hide this information or use a string to
# set a different name to show in the Via header. In the example below
# using the "Hide" keyword will make tinyproxy drop the header, while using
# the "FooBar" keyword will use "FooBar" as the Via header.
#
# ViaProxyName "Hide"
ViaProxyName "tinyproxy"

#
# DisableViaHeader: RFC 2616 requires proxies to set their identity in
# the Via header. This setting allows disabling this in a way that is
# compatible with RFC 2616: By using an empty string Tinyproxy hides
# its identity from the Via header, but does not remove a possibly
# pre-existing header.
#
#DisableViaHeader Yes

#
# Filter: This allows you to specify the location of the filter file.
#
#Filter "/etc/tinyproxy/filter"

#
# FilterURLs: If enabled, request URLs are compared against the filter rules,
# not just domains.
#
#FilterURLs On

#
# FilterType: Use with Filter directive. Determines whether a filter is
# whitelist or blacklist. If no FilterType is specified, the default is
# whitelist.
#
#FilterType Blacklist
#FilterType Whitelist

#
# FilterCaseSensitive: Use with Filter directive to specify if filter rules
# are case sensitive or not. The default is for filter rules to be case
# sensitive.
#
#FilterCaseSensitive No

#
# FilterDefaultDeny: Change the default policy of the filtering system.
# If this directive is enabled, the default policy becomes to deny
# everything which is equivalent to a whitelist with empty rules.
#
#FilterDefaultDeny Yes

#
# Anonymous: If an Anonymous keyword is present, then anonymous proxying
# is enabled.  The headers listed are allowed through, while all others
# are denied. If no Anonymous keyword is present, then all headers are
# allowed through.  You must include quotes around the headers.
#
# Most sites require cookies to be enabled for them to work correctly, so
# you will need to allow Cookies through if you access those sites.
#
#Anonymous "Host"
#Anonymous "Authorization"
#Anonymous "Cookie"

#
# ConnectPort: This is a list of ports allowed by tinyproxy when the
# CONNECT method is used.  To disable the CONNECT method altogether, set
# the value to 0.  By default, all ports are allowed.
#
ConnectPort 443
ConnectPort 563

#
# Configure one or more ReversePath directives to enable reverse proxy
# support. With reverse proxying, a host can be turned into a URL
# for a different server.
#
# For example, requests to /foo get forwarded to
# http://foo.example.com/bar, where /bar is replaced by the URL
# part. Instead of http:// or https://, a unix domain socket can be
# specified via unix:///path/to/socket.
#
# If you uncomment the following two directives and run tinyproxy
# on your own computer at port 8888, you can access Google using
# http://localhost:8888/google/
#
#ReversePath "/google/"   "http://www.google.com/"
#ReversePath "/wired/"    "http://www.wired.com/"

#
# Use ReverseMagic to enable compatibility with broken websites that
# need the original destination name resolved. Don't use if real reverse
# proxy wildcarding is used. Also allows a URL from the ReversePath to
# be used for the new host URL, such as ${3}. See the tinyproxy.conf(5)
# man page for more details.
#
#ReverseMagic Yes

#
# When using HTTPS ProxyPort is used instead of CONNECT
#
#ReverseMagic No
#ReverseBaseURL "https://localhost:8888/"

# To enable WebTerm visit http://localhost/cgi-bin/webterm.py
#WebTermScript /usr/local/sbin/webterm.py
# Added by entrypoint script
